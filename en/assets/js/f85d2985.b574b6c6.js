"use strict";(self.webpackChunkhivetrace_docs=self.webpackChunkhivetrace_docs||[]).push([[156],{4969:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"SDK/Agents/Langchain/index","title":"Integration with LangChain","description":"Demo repository","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/SDK/Agents/Langchain/index.md","sourceDirName":"SDK/Agents/Langchain","slug":"/SDK/Agents/Langchain/","permalink":"/hivetrace-docs/en/SDK/Agents/Langchain/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SDK/Agents/Langchain/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CrewAI Integration","permalink":"/hivetrace-docs/en/SDK/Agents/CrewAI/"},"next":{"title":"OpenAI Agents Integration","permalink":"/hivetrace-docs/en/SDK/Agents/OpenAI Agents/"}}');var s=t(4848),r=t(8453);const i={},o="Integration with LangChain",l={},c=[{value:"Step 1. Install Dependencies",id:"step-1-install-dependencies",level:3},{value:"Step 2. Configure Environment Variables",id:"step-2-configure-environment-variables",level:3},{value:"Step 3. Assign Fixed UUIDs to Your Agents",id:"step-3-assign-fixed-uuids-to-your-agents",level:3},{value:"Step 4. Attach the Callback to Executors and Tools",id:"step-4-attach-the-callback-to-executors-and-tools",level:3},{value:"Step 5. One-Line Integration in a Business Method",id:"step-5-one-line-integration-in-a-business-method",level:3},{value:"Step 6. Reusing the HiveTrace Client (Optional)",id:"step-6-reusing-the-hivetrace-client-optional",level:3},{value:"How Logs Look in HiveTrace",id:"how-logs-look-in-hivetrace",level:3},{value:"Common Mistakes and How to Avoid Them",id:"common-mistakes-and-how-to-avoid-them",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"integration-with-langchain",children:"Integration with LangChain"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Demo repository"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/anntish/multiagents-langchain-forge",children:"https://github.com/anntish/multiagents-langchain-forge"})}),"\n",(0,s.jsx)(n.p,{children:"This project implements monitoring of a multi-agent system in LangChain via the HiveTrace SDK."}),"\n",(0,s.jsx)(n.h3,{id:"step-1-install-dependencies",children:"Step 1. Install Dependencies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'pip install hivetrace[langchain]>=1.3.5\n# optional: add to requirements.txt and install\necho "hivetrace[langchain]>=1.3.3" >> requirements.txt\npip install -r requirements.txt\n'})}),"\n",(0,s.jsx)(n.p,{children:"What the package provides: SDK clients (sync/async), a universal callback for LangChain agents, and ready-to-use calls for sending inputs/logs/outputs to HiveTrace."}),"\n",(0,s.jsx)(n.h3,{id:"step-2-configure-environment-variables",children:"Step 2. Configure Environment Variables"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"HIVETRACE_URL"}),": HiveTrace address"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"HIVETRACE_ACCESS_TOKEN"}),": HiveTrace access token"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"HIVETRACE_APP_ID"}),": your application ID in HiveTrace"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"OPENAI_API_KEY"}),": key for the LLM provider (example with OpenAI)"]}),"\n",(0,s.jsxs)(n.li,{children:["Additionally: ",(0,s.jsx)(n.code,{children:"OPENAI_MODEL"}),", ",(0,s.jsx)(n.code,{children:"USER_ID"}),", ",(0,s.jsx)(n.code,{children:"SESSION_ID"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"step-3-assign-fixed-uuids-to-your-agents",children:"Step 3. Assign Fixed UUIDs to Your Agents"}),"\n",(0,s.jsx)(n.p,{children:'Create a dictionary of fixed UUIDs for all "agent nodes" (e.g., orchestrator, specialized agents). This ensures unambiguous identification in tracing.'}),"\n",(0,s.jsxs)(n.p,{children:["Example: file ",(0,s.jsx)(n.code,{children:"src/core/constants.py"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'PREDEFINED_AGENT_IDS = {\n    "MainHub": "111e1111-e89b-12d3-a456-426614174099",\n    "text_agent": "222e2222-e89b-12d3-a456-426614174099",\n    "math_agent": "333e3333-e89b-12d3-a456-426614174099",\n    "pre_text_agent": "444e4444-e89b-12d3-a456-426614174099",\n    "pre_math_agent": "555e5555-e89b-12d3-a456-426614174099",\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Tip: dictionary keys must match the actual node names appearing in logs (",(0,s.jsx)(n.code,{children:"tool"}),"/agent name in LangChain calls)."]}),"\n",(0,s.jsx)(n.h3,{id:"step-4-attach-the-callback-to-executors-and-tools",children:"Step 4. Attach the Callback to Executors and Tools"}),"\n",(0,s.jsxs)(n.p,{children:["Create and use ",(0,s.jsx)(n.code,{children:"AgentLoggingCallback"})," \u2014 it should be passed:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["as a callback in ",(0,s.jsx)(n.code,{children:"AgentExecutor"})," (orchestrator), and"]}),"\n",(0,s.jsxs)(n.li,{children:["as ",(0,s.jsx)(n.code,{children:"callback_handler"})," in your tools/agent wrappers (",(0,s.jsx)(n.code,{children:"BaseTool"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Example: file ",(0,s.jsx)(n.code,{children:"src/core/orchestrator.py"})," (fragment):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from hivetrace.adapters.langchain import AgentLoggingCallback\nfrom langchain.agents import AgentExecutor, create_openai_tools_agent\nfrom langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder\n\nclass OrchestratorAgent:\n    def __init__(self, llm, predefined_agent_ids=None):\n        self.llm = llm\n        self.logging_callback = AgentLoggingCallback(\n            default_root_name="MainHub",\n            predefined_agent_ids=predefined_agent_ids,\n        )\n        # Example: wrapper agents as tools\n        # MathAgentTool/TextAgentTool internally pass self.logging_callback further\n        agent = create_openai_tools_agent(self.llm, self.tools, ChatPromptTemplate.from_messages([\n            ("system", "You are the orchestrator agent of a multi-agent system."),\n            MessagesPlaceholder(variable_name="chat_history", optional=True),\n            ("human", "{input}"),\n            MessagesPlaceholder(variable_name="agent_scratchpad"),\n        ]))\n        self.executor = AgentExecutor(\n            agent=agent,\n            tools=self.tools,\n            verbose=True,\n            callbacks=[self.logging_callback],\n        )\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Important: all nested agents/tools that create their own ",(0,s.jsx)(n.code,{children:"AgentExecutor"})," or inherit from ",(0,s.jsx)(n.code,{children:"BaseTool"})," must also receive this ",(0,s.jsx)(n.code,{children:"callback_handler"})," so their steps are included in tracing."]}),"\n",(0,s.jsx)(n.h3,{id:"step-5-one-line-integration-in-a-business-method",children:"Step 5. One-Line Integration in a Business Method"}),"\n",(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.code,{children:"run_with_tracing"})," helper from ",(0,s.jsx)(n.code,{children:"hivetrace/adapters/langchain/api.py"}),". It:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"logs the input with agent mapping and metadata;"}),"\n",(0,s.jsx)(n.li,{children:"calls your orchestrator;"}),"\n",(0,s.jsx)(n.li,{children:"collects and sends accumulated logs/final answer."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Minimal example (script):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import os, uuid\nfrom langchain_openai import ChatOpenAI\nfrom src.core.orchestrator import OrchestratorAgent\nfrom src.core.constants import PREDEFINED_AGENT_IDS\nfrom hivetrace.adapters.langchain import run_with_tracing\n\nllm = ChatOpenAI(model=os.getenv("OPENAI_MODEL", "gpt-4o-mini"), temperature=0.2, streaming=False)\norchestrator = OrchestratorAgent(llm, predefined_agent_ids=PREDEFINED_AGENT_IDS)\n\nresult = run_with_tracing(\n    orchestrator=orchestrator,\n    query="Format this text and count the number of words",\n    application_id=os.getenv("HIVETRACE_APP_ID"),\n    user_id=os.getenv("USER_ID"),\n    session_id=os.getenv("SESSION_ID"),\n    conversation_id=str(uuid.uuid4()),\n)\nprint(result)\n'})}),"\n",(0,s.jsx)(n.p,{children:"FastAPI variant (handler fragment):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fastapi import APIRouter, Request\nfrom hivetrace.adapters.langchain import run_with_tracing\nimport uuid\n\nrouter = APIRouter()\n\n@router.post("/query")\nasync def process_query(payload: dict, request: Request):\n    orchestrator = request.app.state.orchestrator\n    conv_id = str(uuid.uuid4()) # always create a new agent_conversation_id for each request to group agent work for the same question\n    result = run_with_tracing(\n        orchestrator=orchestrator,\n        query=payload["query"],\n        application_id=request.app.state.HIVETRACE_APP_ID,\n        user_id=request.app.state.USER_ID,\n        session_id=request.app.state.SESSION_ID,\n        conversation_id=conv_id,\n    )\n    return {"status": "success", "result": result}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-6-reusing-the-hivetrace-client-optional",children:"Step 6. Reusing the HiveTrace Client (Optional)"}),"\n",(0,s.jsx)(n.p,{children:"Helpers automatically create a short-lived client if none is provided. If you want to reuse a client \u2014 create it once during the application's lifecycle and pass it to helpers."}),"\n",(0,s.jsx)(n.p,{children:"FastAPI (lifespan):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from contextlib import asynccontextmanager\nfrom fastapi import FastAPI\nfrom hivetrace import SyncHivetraceSDK\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    hivetrace = SyncHivetraceSDK()\n    app.state.hivetrace = hivetrace\n    try:\n        yield\n    finally:\n        hivetrace.close()\n\napp = FastAPI(lifespan=lifespan)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"result = run_with_tracing(\n    orchestrator=orchestrator,\n    query=payload.query,\n    hivetrace=request.app.state.hivetrace,  # pass your own client\n    application_id=request.app.state.HIVETRACE_APP_ID,\n)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"how-logs-look-in-hivetrace",children:"How Logs Look in HiveTrace"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Agent nodes"}),': orchestrator nodes and specialized "agent wrappers" (',(0,s.jsx)(n.code,{children:"text_agent"}),", ",(0,s.jsx)(n.code,{children:"math_agent"}),", etc.)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Actual tools"}),": low-level tools (e.g., ",(0,s.jsx)(n.code,{children:"text_analyzer"}),", ",(0,s.jsx)(n.code,{children:"text_formatter"}),") are logged on start/end events."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Service records"}),": automatically added ",(0,s.jsx)(n.code,{children:"return_result"})," (returning result to parent) and ",(0,s.jsx)(n.code,{children:"final_answer"})," (final answer of the root node) steps."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This gives a clear call graph with data flow direction and the final answer."}),"\n",(0,s.jsx)(n.h3,{id:"common-mistakes-and-how-to-avoid-them",children:"Common Mistakes and How to Avoid Them"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Name mismatch"}),": key in ",(0,s.jsx)(n.code,{children:"PREDEFINED_AGENT_IDS"})," must match the node/tool name in logs."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No agent mapping"}),": either pass ",(0,s.jsx)(n.code,{children:"agents_mapping"})," to ",(0,s.jsx)(n.code,{children:"run_with_tracing"})," or define ",(0,s.jsx)(n.code,{children:"predefined_agent_ids"})," in ",(0,s.jsx)(n.code,{children:"AgentLoggingCallback"})," \u2014 the SDK will build the mapping automatically."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Callback not attached"}),": add ",(0,s.jsx)(n.code,{children:"AgentLoggingCallback"})," to all ",(0,s.jsx)(n.code,{children:"AgentExecutor"})," and ",(0,s.jsx)(n.code,{children:"BaseTool"})," wrappers via the ",(0,s.jsx)(n.code,{children:"callback_handler"})," parameter."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Client not closed"}),": use lifespan/context manager for ",(0,s.jsx)(n.code,{children:"SyncHivetraceSDK"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);
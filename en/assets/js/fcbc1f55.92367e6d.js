"use strict";(self.webpackChunkhivetrace_docs=self.webpackChunkhivetrace_docs||[]).push([[4324],{4254:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"SDK/Agents/CrewAI/index","title":"CrewAI Integration","description":"Demo repository","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/SDK/Agents/CrewAI/index.md","sourceDirName":"SDK/Agents/CrewAI","slug":"/SDK/Agents/CrewAI/","permalink":"/hivetrace-docs/en/SDK/Agents/CrewAI/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SDK/Agents/CrewAI/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Connecting Applications with a Single LLM (no agents)","permalink":"/hivetrace-docs/en/SDK/single_llm_applications/"},"next":{"title":"Integration with LangChain","permalink":"/hivetrace-docs/en/SDK/Agents/Langchain/"}}');var r=t(4848),s=t(8453);const o={},a="CrewAI Integration",c={},l=[{value:"Step 1: Install the dependency",id:"step-1-install-the-dependency",level:2},{value:"Step 2: <strong>ADD</strong> unique IDs for each agent",id:"step-2-add-unique-ids-for-each-agent",level:2},{value:"Step 3: Create an agent mapping",id:"step-3-create-an-agent-mapping",level:2},{value:"Step 4: Integrate with tools (if used)",id:"step-4-integrate-with-tools-if-used",level:2},{value:"Step 5: Initialize HiveTrace in FastAPI (if used)",id:"step-5-initialize-hivetrace-in-fastapi-if-used",level:2},{value:"Step 6: Integrate into business logic",id:"step-6-integrate-into-business-logic",level:2},{value:"Step 7: Update FastAPI endpoints (if used)",id:"step-7-update-fastapi-endpoints-if-used",level:2},{value:"\ud83d\udea8 Common mistakes",id:"-common-mistakes",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"crewai-integration",children:"CrewAI Integration"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Demo repository"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/anntish/multiagents-crew-forge",children:"https://github.com/anntish/multiagents-crew-forge"})}),"\n",(0,r.jsx)(n.h2,{id:"step-1-install-the-dependency",children:"Step 1: Install the dependency"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What to do:"})," Add the HiveTrace SDK to your project"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Where:"})," In ",(0,r.jsx)(n.code,{children:"requirements.txt"})," or via pip"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Via pip (for quick testing)\npip install hivetrace[crewai]>=1.3.5\n\n# Or add to requirements.txt (recommended)\necho "hivetrace[crewai]>=1.3.3" >> requirements.txt\npip install -r requirements.txt\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why:"})," The HiveTrace SDK provides decorators and clients for sending agent activity data to the monitoring platform."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"step-2-add-unique-ids-for-each-agent",children:["Step 2: ",(0,r.jsx)(n.strong,{children:"ADD"})," unique IDs for each agent"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example:"})," In ",(0,r.jsx)(n.code,{children:"src/config.py"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'PLANNER_ID = "333e4567-e89b-12d3-a456-426614174001"\nWRITER_ID = "444e4567-e89b-12d3-a456-426614174002"\nEDITOR_ID = "555e4567-e89b-12d3-a456-426614174003"\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why agents need IDs:"})," HiveTrace tracks each agent individually. A UUID ensures the agent can be uniquely identified in the monitoring system."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-3-create-an-agent-mapping",children:"Step 3: Create an agent mapping"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What to do:"})," Map agent roles to their HiveTrace IDs"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example:"})," In ",(0,r.jsx)(n.code,{children:"src/agents.py"})," (where your agents are defined)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from crewai import Agent\n# ADD: import agent IDs\nfrom src.config import EDITOR_ID, PLANNER_ID, WRITER_ID\n\n# ADD: mapping for HiveTrace (REQUIRED!)\nagent_id_mapping = {\n    "Content Planner": {  # \u2190 Exactly the same as Agent(role="Content Planner")\n        "id": PLANNER_ID,\n        "description": "Creates content plans"\n    },\n    "Content Writer": {   # \u2190 Exactly the same as Agent(role="Content Writer")\n        "id": WRITER_ID,\n        "description": "Writes high-quality articles"\n    },\n    "Editor": {           # \u2190 Exactly the same as Agent(role="Editor")\n        "id": EDITOR_ID,\n        "description": "Edits and improves articles"\n    },\n}\n\n# Your existing agents (NO CHANGES)\nplanner = Agent(\n    role="Content Planner",  # \u2190 Must match key in agent_id_mapping\n    goal="Create a structured content plan for the given topic",\n    backstory="You are an experienced analyst...",\n    verbose=True,\n)\n\nwriter = Agent(\n    role="Content Writer",   # \u2190 Must match key in agent_id_mapping\n    goal="Write an informative and engaging article",\n    backstory="You are a talented writer...",\n    verbose=True,\n)\n\neditor = Agent(\n    role="Editor",           # \u2190 Must match key in agent_id_mapping\n    goal="Improve the article",\n    backstory="You are an experienced editor...",\n    verbose=True,\n)\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important:"})," The keys in ",(0,r.jsx)(n.code,{children:"agent_id_mapping"})," must ",(0,r.jsx)(n.strong,{children:"exactly"})," match the ",(0,r.jsx)(n.code,{children:"role"})," of your agents. Otherwise, HiveTrace will not be able to associate activity with the correct agent."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-4-integrate-with-tools-if-used",children:"Step 4: Integrate with tools (if used)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What to do:"})," Add HiveTrace support to tools"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example:"})," In ",(0,r.jsx)(n.code,{children:"src/tools.py"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from crewai.tools import BaseTool\nfrom typing import Optional\n\nclass WordCountTool(BaseTool):\n    name: str = "WordCountTool"\n    description: str = "Count words, characters and sentences in text"\n    # ADD: HiveTrace field (REQUIRED!)\n    agent_id: Optional[str] = None\n    \n    def _run(self, text: str) -> str:\n        word_count = len(text.split())\n        return f"Word count: {word_count}"\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example:"})," In ",(0,r.jsx)(n.code,{children:"src/agents.py"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from src.tools import WordCountTool\nfrom src.config import PLANNER_ID, WRITER_ID, EDITOR_ID\n\n# ADD: create tools for each agent\nplanner_tools = [WordCountTool()]\nwriter_tools = [WordCountTool()]\neditor_tools = [WordCountTool()]\n\n# ADD: assign tools to agents\nfor tool in planner_tools:\n    tool.agent_id = PLANNER_ID\n\nfor tool in writer_tools:\n    tool.agent_id = WRITER_ID\n\nfor tool in editor_tools:\n    tool.agent_id = EDITOR_ID\n\n# Use tools in agents\nplanner = Agent(\n    role="Content Planner",\n    tools=planner_tools,  # \u2190 Agent-specific tools\n    # ... other parameters\n)\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why:"})," HiveTrace tracks tool usage. The ",(0,r.jsx)(n.code,{children:"agent_id"})," field in the tool class and its assignment let HiveTrace know which agent used which tool."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-5-initialize-hivetrace-in-fastapi-if-used",children:"Step 5: Initialize HiveTrace in FastAPI (if used)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What to do:"})," Add the HiveTrace client to the application lifecycle"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example:"})," In ",(0,r.jsx)(n.code,{children:"main.py"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from contextlib import asynccontextmanager\nfrom fastapi import FastAPI\n# ADD: import HiveTrace SDK\nfrom hivetrace import SyncHivetraceSDK\nfrom src.config import HIVETRACE_ACCESS_TOKEN, HIVETRACE_URL\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # ADD: initialize HiveTrace client\n    hivetrace = SyncHivetraceSDK(\n        config={\n            "HIVETRACE_URL": HIVETRACE_URL,\n            "HIVETRACE_ACCESS_TOKEN": HIVETRACE_ACCESS_TOKEN,\n        }\n    )\n    # Store client in app state\n    app.state.hivetrace = hivetrace\n    try:\n        yield\n    finally:\n        # IMPORTANT: close connection on shutdown\n        hivetrace.close()\n\napp = FastAPI(lifespan=lifespan)\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-6-integrate-into-business-logic",children:"Step 6: Integrate into business logic"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What to do:"})," Wrap Crew creation with the HiveTrace decorator"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example:"})," In ",(0,r.jsx)(n.code,{children:"src/services/topic_service.py"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import uuid\nfrom typing import Optional\nfrom crewai import Crew\n# ADD: HiveTrace imports\nfrom hivetrace import SyncHivetraceSDK\nfrom hivetrace import crewai_trace as trace\n\nfrom src.agents import agent_id_mapping, planner, writer, editor\nfrom src.tasks import plan_task, write_task, edit_task\nfrom src.config import HIVETRACE_APP_ID\n\ndef process_topic(\n    topic: str,\n    hivetrace: SyncHivetraceSDK,  # \u2190 ADD parameter\n    user_id: Optional[str] = None,\n    session_id: Optional[str] = None,\n):\n    # ADD: generate unique conversation ID\n    agent_conversation_id = str(uuid.uuid4())\n    \n    # ADD: common trace parameters\n    common_params = {\n        "agent_conversation_id": agent_conversation_id,\n        "user_id": user_id,\n        "session_id": session_id,\n    }\n\n    # ADD: log user request\n    hivetrace.input(\n        application_id=HIVETRACE_APP_ID,\n        message=f"Requesting information from agents on topic: {topic}",\n        additional_parameters={\n            **common_params,\n            "agents": agent_id_mapping,  # \u2190 pass agent mapping\n        },\n    )\n\n    # ADD: @trace decorator for monitoring Crew\n    @trace(\n        hivetrace=hivetrace,\n        application_id=HIVETRACE_APP_ID,\n        agent_id_mapping=agent_id_mapping,  # \u2190 REQUIRED!\n    )\n    def create_crew():\n        return Crew(\n            agents=[planner, writer, editor],\n            tasks=[plan_task, write_task, edit_task],\n            verbose=True,\n        )\n\n    # Execute with monitoring\n    crew = create_crew()\n    result = crew.kickoff(\n        inputs={"topic": topic},\n        **common_params  # \u2190 pass common parameters\n    )\n\n    return {\n        "result": result.raw,\n        "execution_details": {**common_params, "status": "completed"},\n    }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"How it works:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"agent_conversation_id"})})," \u2014 unique ID for grouping all actions under a single request"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"hivetrace.input()"})})," \u2014 sends the user\u2019s request to HiveTrace for inspection"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"@trace"})}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Intercepts all agent actions inside the Crew"}),"\n",(0,r.jsx)(n.li,{children:"Sends data about each step to HiveTrace"}),"\n",(0,r.jsxs)(n.li,{children:["Associates actions with specific agents via ",(0,r.jsx)(n.code,{children:"agent_id_mapping"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"**common_params"})})," \u2014 passes metadata into ",(0,r.jsx)(n.code,{children:"crew.kickoff()"})," so all events are linked"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Critical:"})," The ",(0,r.jsx)(n.code,{children:"@trace"})," decorator must be applied to the function that creates and returns the ",(0,r.jsx)(n.code,{children:"Crew"}),", ",(0,r.jsx)(n.strong,{children:"not"})," the function that calls ",(0,r.jsx)(n.code,{children:"kickoff()"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-7-update-fastapi-endpoints-if-used",children:"Step 7: Update FastAPI endpoints (if used)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What to do:"})," Pass the HiveTrace client to the business logic"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example:"})," In ",(0,r.jsx)(n.code,{children:"src/routers/topic_router.py"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import APIRouter, Body, Request\n# ADD: import HiveTrace type\nfrom hivetrace import SyncHivetraceSDK\n\nfrom src.services.topic_service import process_topic\nfrom src.config import SESSION_ID, USER_ID\n\nrouter = APIRouter(prefix="/api")\n\n@router.post("/process-topic")\nasync def api_process_topic(request: Request, request_body: dict = Body(...)):\n    # ADD: get HiveTrace client from app state\n    hivetrace: SyncHivetraceSDK = request.app.state.hivetrace\n    \n    return process_topic(\n        topic=request_body["topic"],\n        hivetrace=hivetrace,  # \u2190 pass client\n        user_id=USER_ID,\n        session_id=SESSION_ID,\n    )\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why:"})," The API endpoint must pass the HiveTrace client to the business logic so monitoring data can be sent."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-common-mistakes",children:"\ud83d\udea8 Common mistakes"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Role mismatch"})," \u2014 make sure keys in ",(0,r.jsx)(n.code,{children:"agent_id_mapping"})," exactly match ",(0,r.jsx)(n.code,{children:"role"})," in agents"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Missing ",(0,r.jsx)(n.code,{children:"agent_id_mapping"})]})," \u2014 the ",(0,r.jsx)(n.code,{children:"@trace"})," decorator must receive the mapping"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Decorator on wrong function"})," \u2014 ",(0,r.jsx)(n.code,{children:"@trace"})," must be applied to the Crew creation function, not ",(0,r.jsx)(n.code,{children:"kickoff"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Client not closed"})," \u2014 remember to call ",(0,r.jsx)(n.code,{children:"hivetrace.close()"})," in the lifespan"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Invalid credentials"})," \u2014 check your HiveTrace environment variables"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);
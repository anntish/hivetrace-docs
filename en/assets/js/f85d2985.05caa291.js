"use strict";(self.webpackChunkhivetrace_docs=self.webpackChunkhivetrace_docs||[]).push([[156],{4969:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"SDK/Agents/Langchain/index","title":"Integration with LangChain","description":"Overview","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/SDK/Agents/Langchain/index.md","sourceDirName":"SDK/Agents/Langchain","slug":"/SDK/Agents/Langchain/","permalink":"/hivetrace-docs/en/SDK/Agents/Langchain/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SDK/Agents/Langchain/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CrewAI Integration","permalink":"/hivetrace-docs/en/SDK/Agents/CrewAI/"},"next":{"title":"OpenAI Agents Integration","permalink":"/hivetrace-docs/en/SDK/Agents/OpenAI Agents/"}}');var a=t(4848),r=t(8453);const s={},l="Integration with LangChain",c={},o=[{value:"Overview",id:"overview",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Basic Setup",id:"basic-setup",level:3},{value:"Step\xa01: Initialize the SDK",id:"step1-initialize-the-sdk",level:4},{value:"Step\xa02: Define agent IDs",id:"step2-define-agent-ids",level:4},{value:"Step\xa03: Configure the LangChain adapter",id:"step3-configure-the-langchain-adapter",level:4},{value:"Step\xa04: Use in your LangChain application",id:"step4-use-in-your-langchain-application",level:4},{value:"Using the <code>@trace</code> Decorator",id:"using-the-trace-decorator",level:2},{value:"Reference",id:"reference",level:2},{value:"Required Parameters",id:"required-parameters",level:3},{value:"Optional Parameters",id:"optional-parameters",level:3},{value:"Environment Variables",id:"environment-variables",level:3}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"integration-with-langchain",children:"Integration with LangChain"})}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.p,{children:"The HiveTrace SDK offers seamless integration with LangChain, allowing you to monitor agent interactions, tool usage, and task execution in your LangChain-based applications."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,a.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["HiveTrace SDK installed: ",(0,a.jsx)(n.code,{children:"pip install hivetrace[langchain]"})]}),"\n",(0,a.jsxs)(n.li,{children:["A valid HiveTrace ",(0,a.jsx)(n.strong,{children:"Application ID"})," and ",(0,a.jsx)(n.strong,{children:"Access Token"})]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,a.jsx)(n.h4,{id:"step1-initialize-the-sdk",children:"Step\xa01: Initialize the SDK"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from hivetrace import HivetraceSDK\nfrom hivetrace import LangChainAdapter\n\n# SDK initialisation\nhivetrace = HivetraceSDK(\n    config={\n        "HIVETRACE_URL": "https://your-hivetrace-instance.com",  # required\n        "HIVETRACE_ACCESS_TOKEN": "your-access-token",          # required\n    },\n    async_mode=False,  # optional, defaults to True\n)\n'})}),"\n",(0,a.jsx)(n.h4,{id:"step2-define-agent-ids",children:"Step\xa02: Define agent IDs"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import uuid\n\n# Generate agent IDs once and persist them\nPREDEFINED_AGENT_IDS = {\n    "MainHub": str(uuid.uuid4()),\n    "agent1": str(uuid.uuid4()),\n    "agent2": str(uuid.uuid4()),\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"step3-configure-the-langchain-adapter",children:"Step\xa03: Configure the LangChain adapter"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from hivetrace.adapters.langchain import AgentLoggingCallback\n\n# Create a callback for logging\nlogging_callback = AgentLoggingCallback(\n    default_root_name="MainHub",\n    predefined_agent_ids=PREDEFINED_AGENT_IDS,\n)\n\n# Initialise the adapter\nadapter = LangChainAdapter(\n    hivetrace=hivetrace,\n    application_id="your-hivetrace-app-id",\n    user_id="optional-user-id",\n    session_id="optional-session-id",\n)\n'})}),"\n",(0,a.jsx)(n.h4,{id:"step4-use-in-your-langchain-application",children:"Step\xa04: Use in your LangChain application"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from langchain.agents import AgentExecutor, create_openai_tools_agent\nfrom langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder\nfrom langchain_openai import ChatOpenAI\n\n# Initialise your LLM\nllm = ChatOpenAI(model="gpt-4", temperature=0)\n\n# Create your tools with the callback\ntools = [\n    YourCustomTool(callback_handler=logging_callback),\n    AnotherTool(callback_handler=logging_callback),\n]\n\n# Build the agent\nagent = create_openai_tools_agent(\n    llm=llm,\n    tools=tools,\n    prompt=your_prompt_template,\n)\n\n# Create the executor with the callback\nagent_executor = AgentExecutor(\n    agent=agent,\n    tools=tools,\n    callbacks=[logging_callback],\n    verbose=True,\n)\n\n# Handle a user request\nconversation_id = str(uuid.uuid4())\nagents_mapping = {\n    agent_uuid: {\n        "name": agent_name,\n        "description": "",\n    }\n    for agent_name, agent_uuid in PREDEFINED_AGENT_IDS.items()\n}\n\n# Log the input\nadapter.input(\n    message="Your user query here",\n    additional_params={\n        "agents": agents_mapping,\n        "agent_conversation_id": conversation_id,\n    }\n)\n\n# Execute the agent\nresult = agent_executor.invoke({"input": "Your user query here"})\n\n# The adapter automatically logs all agent interactions and tool usage\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"using-the-trace-decorator",children:["Using the ",(0,a.jsx)(n.code,{children:"@trace"})," Decorator"]}),"\n",(0,a.jsxs)(n.p,{children:["You can automatically monitor your LangChain orchestrator with the ",(0,a.jsx)(n.code,{children:"@trace"})," decorator:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from hivetrace import langchain_trace as trace\n\n@trace(\n    hivetrace=hivetrace,\n    application_id="your-hivetrace-app-id",\n    user_id="optional-user-id",\n    session_id="optional-session-id",\n)\nclass YourOrchestrator:\n    def __init__(self, llm):\n        self.llm = llm\n        self.logging_callback = AgentLoggingCallback(\n            default_root_name="MainHub",\n            predefined_agent_ids=PREDEFINED_AGENT_IDS,\n        )\n        # Initialise your agents and tools here\n\n    def run(self, query: str):\n        # Orchestration logic\n        self.logging_callback.reset()  # use reset() before each run\n        ...\n\nresult = YourOrchestrator(llm).run("Your query")\nprint(result)\n'})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Important"}),": If you reuse the same instance of ",(0,a.jsx)(n.code,{children:"YourOrchestrator"}),", the internal ",(0,a.jsx)(n.code,{children:"AgentLoggingCallback"})," remains the same. Call ",(0,a.jsx)(n.code,{children:"reset()"})," to clear accumulated data so that only the events of the current request are sent to HiveTrace."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,a.jsx)(n.h3,{id:"required-parameters",children:"Required Parameters"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Parameter"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"hivetrace"})}),(0,a.jsx)(n.td,{children:"An initialised SDK instance"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"application_id"})}),(0,a.jsx)(n.td,{children:"The HiveTrace Application ID from the UI"})]})]})]}),"\n",(0,a.jsx)(n.h3,{id:"optional-parameters",children:"Optional Parameters"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Parameter"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"user_id"})}),(0,a.jsx)(n.td,{children:"User identifier"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"session_id"})}),(0,a.jsx)(n.td,{children:"Session identifier"})]})]})]}),"\n",(0,a.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# .env file\nHIVETRACE_URL=https://your-hivetrace-instance.com\nHIVETRACE_ACCESS_TOKEN=your-access-token\n"})}),"\n",(0,a.jsx)(n.h1,{id:"license",children:"License"}),"\n",(0,a.jsx)(n.p,{children:"This project is licensed under Apache License 2.0."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(6540);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
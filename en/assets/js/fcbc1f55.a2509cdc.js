"use strict";(self.webpackChunkhivetrace_docs=self.webpackChunkhivetrace_docs||[]).push([[4324],{4254:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"SDK/Agents/CrewAI/index","title":"CrewAI Integration","description":"Monitor your CrewAI multi-agent systems with automatic tracking of all agent interactions, tool usage, and task execution.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/SDK/Agents/CrewAI/index.md","sourceDirName":"SDK/Agents/CrewAI","slug":"/SDK/Agents/CrewAI/","permalink":"/hivetrace-docs/en/SDK/Agents/CrewAI/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SDK/Agents/CrewAI/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Connecting Applications with a Single LLM (no agents)","permalink":"/hivetrace-docs/en/SDK/single_llm_applications/"},"next":{"title":"Integration with LangChain","permalink":"/hivetrace-docs/en/SDK/Agents/Langchain/"}}');var t=r(4848),a=r(8453);const s={},o="CrewAI Integration",c={},d=[{value:"Quick Start",id:"quick-start",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Basic Setup",id:"basic-setup",level:3},{value:"Step\xa01: Initialize the SDK (required)",id:"step1-initialize-the-sdk-required",level:4},{value:"Step\xa02: Configure agent monitoring",id:"step2-configure-agent-monitoring",level:4},{value:"Step\xa03: Configure agents and tools with tracking",id:"step3-configure-agents-and-tools-with-tracking",level:4},{value:"Step\xa04: Apply the monitoring decorator",id:"step4-apply-the-monitoring-decorator",level:4},{value:"Step\xa05: Run with monitoring",id:"step5-run-with-monitoring",level:4},{value:"Configuration Reference",id:"configuration-reference",level:2},{value:"Required Parameters",id:"required-parameters",level:3},{value:"Optional Parameters",id:"optional-parameters",level:3},{value:"Agent ID Mapping Format",id:"agent-id-mapping-format",level:3},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Asynchronous Mode",id:"asynchronous-mode",level:3},{value:"Tool Tracking",id:"tool-tracking",level:3}];function l(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"crewai-integration",children:"CrewAI Integration"})}),"\n",(0,t.jsx)(n.p,{children:"Monitor your CrewAI multi-agent systems with automatic tracking of all agent interactions, tool usage, and task execution."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Important:"})," This integration currently supports ",(0,t.jsx)(n.strong,{children:"linear agent workflows"})," where agents perform tasks sequentially. Support for more complex interaction models (parallel execution, dynamic delegation, etc.) is coming soon."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," The agents shown in the examples (Researcher, Writer, Reviewer) are for demonstration only. You can use any agents, roles, goals, and tools that fit your use-case."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["HiveTrace SDK installed: ",(0,t.jsx)(n.code,{children:"pip install hivetrace[crewai]"})]}),"\n",(0,t.jsxs)(n.li,{children:["A valid HiveTrace ",(0,t.jsx)(n.strong,{children:"Application ID"})," and ",(0,t.jsx)(n.strong,{children:"Access Token"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,t.jsx)(n.h4,{id:"step1-initialize-the-sdk-required",children:"Step\xa01: Initialize the SDK (required)"}),"\n",(0,t.jsx)(n.p,{children:"You can use environment variables or pass the configuration explicitly."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from hivetrace import HivetraceSDK\n\nhivetrace = HivetraceSDK(\n    config={\n        "HIVETRACE_URL": "https://your-hivetrace-instance.com",  # required\n        "HIVETRACE_ACCESS_TOKEN": "your-access-token",          # required\n    },\n    async_mode=False,  # optional, defaults to True\n)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"step2-configure-agent-monitoring",children:"Step\xa02: Configure agent monitoring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import uuid\nfrom crewai import Agent, Crew, Task\nfrom hivetrace import crewai_trace as trace\n\n# Generate unique UUIDs for your agents (generate once and persist)\nRESEARCHER_ID = str(uuid.uuid4())\nWRITER_ID = str(uuid.uuid4())\nREVIEWER_ID = str(uuid.uuid4())\n\n# Map roles to IDs (required for monitoring)\nAGENT_IDS = {\n    "researcher": RESEARCHER_ID,\n    "writer": WRITER_ID,\n    "reviewer": REVIEWER_ID,\n}\n\n# Create a mapping with descriptions (required by the decorator)\nagent_id_mapping = {\n    "Researcher": {\n        "id": AGENT_IDS["researcher"],\n        "description": "Researches topics and gathers information",\n    },\n    "Writer": {\n        "id": AGENT_IDS["writer"],\n        "description": "Produces high-quality written content",\n    },\n    "Reviewer": {\n        "id": AGENT_IDS["reviewer"],\n        "description": "Reviews and improves content quality",\n    },\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"step3-configure-agents-and-tools-with-tracking",children:"Step\xa03: Configure agents and tools with tracking"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from crewai_tools import WebSearchTool\n\n# Create tools and assign agent IDs for tracking\nresearch_tools = [WebSearchTool()]\nfor tool in research_tools:\n    tool.agent_id = AGENT_IDS["researcher"]  # required for tool tracking\n\n# Define the agents\nresearcher = Agent(\n    role="Researcher",\n    goal="Thoroughly research the given topic",\n    backstory="Expert researcher with web-search capabilities",\n    tools=research_tools,\n    verbose=True,\n)\n\nwriter = Agent(\n    role="Writer",\n    goal="Produce comprehensive content",\n    backstory="Professional content writer",\n    verbose=True,\n)\n\nreviewer = Agent(\n    role="Reviewer",\n    goal="Review and improve content quality",\n    backstory="Editorial expert focused on quality",\n    verbose=True,\n)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"step4-apply-the-monitoring-decorator",children:"Step\xa04: Apply the monitoring decorator"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@trace(\n    hivetrace=hivetrace,            # required\n    application_id="your-hivetrace-app-id",  # required\n    agent_id_mapping=agent_id_mapping,         # required\n)\ndef create_monitored_crew():\n    """Create and return a monitored CrewAI team."""\n\n    # Define tasks\n    research_task = Task(\n        description="Research {topic} and gather key information",\n        agent=researcher,\n        expected_output="Detailed research report",\n    )\n\n    writing_task = Task(\n        description="Write an article on {topic} based on the research",\n        agent=writer,\n        expected_output="Well-written article",\n    )\n\n    review_task = Task(\n        description="Review and improve the article",\n        agent=reviewer,\n        expected_output="Polished final article",\n    )\n\n    return Crew(\n        agents=[researcher, writer, reviewer],\n        tasks=[research_task, writing_task, review_task],\n        verbose=True,\n    )\n'})}),"\n",(0,t.jsx)(n.h4,{id:"step5-run-with-monitoring",children:"Step\xa05: Run with monitoring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def run_monitored_workflow(topic: str, user_id: str | None = None, session_id: str | None = None):\n    """Execute the agent workflow with full monitoring."""\n\n    conversation_id = str(uuid.uuid4())\n\n    # Log the initial user input (recommended)\n    hivetrace.input(\n        application_id="your-hivetrace-app-id",\n        message=f"User requested content for topic: {topic}",\n        additional_parameters={\n            "agent_conversation_id": conversation_id,\n            "user_id": user_id,\n            "session_id": session_id,\n            "agents": {\n                data["id"]: {\n                    "name": name,\n                    "description": data["description"],\n                }\n                for name, data in agent_id_mapping.items()\n            },\n        },\n    )\n\n    # Create and execute the crew\n    crew = create_monitored_crew()\n\n    execution_params = {"inputs": {"topic": topic}}\n    if user_id:\n        execution_params["user_id"] = user_id\n    if session_id:\n        execution_params["session_id"] = session_id\n    if conversation_id:\n        execution_params["agent_conversation_id"] = conversation_id\n\n    result = crew.kickoff(**execution_params)\n    return result\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"configuration-reference",children:"Configuration Reference"}),"\n",(0,t.jsx)(n.h3,{id:"required-parameters",children:"Required Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"hivetrace"})}),(0,t.jsx)(n.td,{children:"An initialised SDK instance"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"application_id"})}),(0,t.jsx)(n.td,{children:"The HiveTrace Application ID from the UI"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"agent_id_mapping"})}),(0,t.jsx)(n.td,{children:"Mapping of agent roles to IDs and descriptions"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"optional-parameters",children:"Optional Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"user_id"})}),(0,t.jsx)(n.td,{children:"User identifier"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"session_id"})}),(0,t.jsx)(n.td,{children:"Session identifier"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"agent-id-mapping-format",children:"Agent ID Mapping Format"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'agent_id_mapping = {\n    "Agent role name": {\n        "id": "unique-uuid-string",  # required\n        "description": "Agent description",  # required\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,t.jsx)(n.p,{children:"Set environment variables for an easier setup:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# .env file\nHIVETRACE_URL=https://your-hivetrace-instance.com\nHIVETRACE_ACCESS_TOKEN=your-access-token\nHIVETRACE_APP_ID=your-application-id\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nhivetrace = HivetraceSDK(\n    config={\n        "HIVETRACE_URL": os.getenv("HIVETRACE_URL"),\n        "HIVETRACE_ACCESS_TOKEN": os.getenv("HIVETRACE_ACCESS_TOKEN"),\n    },\n    async_mode=False,\n)\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,t.jsx)(n.h3,{id:"asynchronous-mode",children:"Asynchronous Mode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import asyncio\n\nhivetrace = HivetraceSDK(async_mode=True)\n\n@trace(\n    hivetrace=hivetrace,\n    application_id="app-id",\n    agent_id_mapping=agent_id_mapping,\n)\ndef create_crew():\n    return Crew(agents=[...], tasks=[...])\n\nasync def run_async_workflow():\n    await hivetrace.input_async(\n        application_id="app-id",\n        message="User input",\n    )\n\n    crew = create_crew()\n    result = await crew.kickoff_async(inputs={"topic": "AI"})\n\n    await hivetrace.close()\n\nasyncio.run(run_async_workflow())\n'})}),"\n",(0,t.jsx)(n.h3,{id:"tool-tracking",children:"Tool Tracking"}),"\n",(0,t.jsxs)(n.p,{children:["Assign an ",(0,t.jsx)(n.code,{children:"agent_id"})," to every tool you want to track:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from crewai_tools import FileReadTool, WebSearchTool\n\nsearch_tool = WebSearchTool()\nfile_tool = FileReadTool()\n\nsearch_tool.agent_id = "agent-uuid-here"\nfile_tool.agent_id  = "agent-uuid-here"\n\nagent = Agent(\n    role="Researcher",\n    tools=[search_tool, file_tool],\n    ...\n)\n'})}),"\n",(0,t.jsx)(n.h1,{id:"license",children:"License"}),"\n",(0,t.jsx)(n.p,{children:"This project is licensed under Apache License 2.0."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var i=r(6540);const t={},a=i.createContext(t);function s(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);
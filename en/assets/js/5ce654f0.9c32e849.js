"use strict";(self.webpackChunkhivetrace_docs=self.webpackChunkhivetrace_docs||[]).push([[6523],{3646:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"SDK/single_llm_applications/index","title":"Connecting Applications with a Single LLM (no agents)","description":"Overview","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/SDK/single_llm_applications/index.md","sourceDirName":"SDK/single_llm_applications","slug":"/SDK/single_llm_applications/","permalink":"/hivetrace-docs/en/SDK/single_llm_applications/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SDK/single_llm_applications/index.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Connecting Applications with a Single LLM (no agents)"},"sidebar":"tutorialSidebar","previous":{"title":"SDK","permalink":"/hivetrace-docs/en/category/sdk"},"next":{"title":"CrewAI Integration","permalink":"/hivetrace-docs/en/SDK/Agents/CrewAI/"}}');var t=i(4848),a=i(8453);const l={sidebar_position:1,title:"Connecting Applications with a Single LLM (no agents)"},o="HiveTrace SDK",r={},c=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Synchronous Client",id:"synchronous-client",level:2},{value:"Initialize (Sync)",id:"initialize-sync",level:3},{value:"Send a user prompt (input)",id:"send-a-user-prompt-input",level:3},{value:"Send an LLM response (output)",id:"send-an-llm-response-output",level:3},{value:"Asynchronous Client",id:"asynchronous-client",level:2},{value:"Initialize (Async)",id:"initialize-async",level:3},{value:"Send a user prompt (input)",id:"send-a-user-prompt-input-1",level:3},{value:"Send an LLM response (output)",id:"send-an-llm-response-output-1",level:3},{value:"Example with Additional Parameters",id:"example-with-additional-parameters",level:2},{value:"API",id:"api",level:2},{value:"<code>input</code>",id:"input",level:3},{value:"<code>output</code>",id:"output",level:3},{value:"Sending Requests in Sync Mode",id:"sending-requests-in-sync-mode",level:2},{value:"Sending Requests in Async Mode",id:"sending-requests-in-async-mode",level:2},{value:"Closing the Async Client",id:"closing-the-async-client",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Configuration Sources",id:"configuration-sources",level:3},{value:"Environment Variables",id:"environment-variables",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"hivetrace-sdk",children:"HiveTrace SDK"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The Hivetrace SDK lets you integrate with the Hivetrace service to monitor user prompts and LLM responses. It supports both synchronous and asynchronous workflows and can be configured via environment variables."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"Install from PyPI:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip install hivetrace[base]\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from hivetrace import SyncHivetraceSDK, AsyncHivetraceSDK\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can use either the synchronous client (",(0,t.jsx)(n.code,{children:"SyncHivetraceSDK"}),") or the asynchronous client (",(0,t.jsx)(n.code,{children:"AsyncHivetraceSDK"}),"). Choose the one that fits your runtime."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"synchronous-client",children:"Synchronous Client"}),"\n",(0,t.jsx)(n.h3,{id:"initialize-sync",children:"Initialize (Sync)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# The sync client reads configuration from environment variables or accepts an explicit config\nclient = SyncHivetraceSDK()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"send-a-user-prompt-input",children:"Send a user prompt (input)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'response = client.input(\n    application_id="your-application-id",  # Obtained after registering the application in the UI\n    message="User prompt here",\n)\n\n# Optionally attach files (filename, bytes, mime_type)\nfiles = [\n    ("doc1.txt", open("doc1.txt", "rb"), "text/plain"),\n]\nresponse_with_files = client.input(\n    application_id="your-application-id",\n    message="User prompt with files",\n    files=files,\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"send-an-llm-response-output",children:"Send an LLM response (output)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'response = client.output(\n    application_id="your-application-id",\n    message="LLM response here",\n)\n\n# With files\nfiles = [\n    ("doc1.txt", open("doc1.txt", "rb"), "text/plain"),\n]\nresponse_with_files = client.output(\n    application_id="your-application-id",\n    message="LLM response with files",\n    files=files,\n)\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," the file is attached to analyze what users have sent to LLM. At the moment, the contents of the files are not checked by the hivetrace censor."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"asynchronous-client",children:"Asynchronous Client"}),"\n",(0,t.jsx)(n.h3,{id:"initialize-async",children:"Initialize (Async)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# The async client can be used as a context manager\nclient = AsyncHivetraceSDK()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"send-a-user-prompt-input-1",children:"Send a user prompt (input)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'response = await client.input(\n    application_id="your-application-id",\n    message="User prompt here",\n)\n\n# With files (filename, bytes, mime_type)\nfiles = [\n    ("doc1.txt", open("doc1.txt", "rb"), "text/plain"),\n]\nresponse_with_files = await client.input(\n    application_id="your-application-id",\n    message="User prompt with files",\n    files=files,\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"send-an-llm-response-output-1",children:"Send an LLM response (output)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'response = await client.output(\n    application_id="your-application-id",\n    message="LLM response here",\n)\n\n# With files\nfiles = [\n    ("doc1.txt", open("doc1.txt", "rb"), "text/plain"),\n]\nresponse_with_files = await client.output(\n    application_id="your-application-id",\n    message="LLM response with files",\n    files=files,\n)\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," the file is attached to analyze what users have sent to LLM. At the moment, the contents of the files are not checked by the hivetrace censor."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"example-with-additional-parameters",children:"Example with Additional Parameters"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'response = client.input(\n    application_id="your-application-id",\n    message="User prompt here",\n    additional_parameters={\n        "session_id": "your-session-id",\n        "user_id": "your-user-id",\n        "agents": {\n            "agent-1-id": {"name": "Agent 1", "description": "Agent description"},\n            "agent-2-id": {"name": "Agent 2"},\n            "agent-3-id": {}\n        },\n        # If you want to send only to censor and avoid DB persistence on backend\n        "censor_only": True,\n    }\n)\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,t.jsx)(n.h3,{id:"input",children:(0,t.jsx)(n.code,{children:"input"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Sync\ndef input(application_id: str, message: str, additional_parameters: dict | None = None, files: list[tuple[str, bytes, str]] | None = None,) -> dict: ...\n\n# Async\nasync def input(application_id: str, message: str, additional_parameters: dict | None = None, files: list[tuple[str, bytes, str]] | None = None,) -> dict: ...\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Sends a ",(0,t.jsx)(n.strong,{children:"user prompt"})," to Hivetrace."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"application_id"})," \u2014 Application identifier (must be a valid UUID, created in the UI)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"message"})," \u2014 The user prompt"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"additional_parameters"})," \u2014 Optional dictionary with extra context (session, user, agents, etc.)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Response example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "status": "processed",\n  "monitoring_result": {\n    "is_toxic": false,\n    "type_of_violation": "benign",\n    "token_count": 9,\n    "token_usage_severity": None\n  }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"output",children:(0,t.jsx)(n.code,{children:"output"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Sync\ndef output(application_id: str, message: str, additional_parameters: dict | None = None, files: list[tuple[str, bytes, str]] | None = None,) -> dict: ...\n\n# Async\nasync def output(application_id: str, message: str, additional_parameters: dict | None = None, files: list[tuple[str, bytes, str]] | None = None,) -> dict: ...\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Sends an ",(0,t.jsx)(n.strong,{children:"LLM response"})," to Hivetrace."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"application_id"})," \u2014 Application identifier (must be a valid UUID, created in the UI)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"message"})," \u2014 The LLM response"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"additional_parameters"})," \u2014 Optional dictionary with extra context (session, user, agents, etc.)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Response example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "status": "processed",\n  "monitoring_result": {\n    "is_toxic": false,\n    "type_of_violation": "safe",\n    "token_count": 21,\n    "token_usage_severity": None\n  }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"sending-requests-in-sync-mode",children:"Sending Requests in Sync Mode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def main():\n    # option 1: context manager\n    with SyncHivetraceSDK() as client:\n        response = client.input(\n            application_id="your-application-id",\n            message="User prompt here",\n        )\n\n    # option 2: manual close\n    client = SyncHivetraceSDK()\n    try:\n        response = client.input(\n            application_id="your-application-id",\n            message="User prompt here",\n        )\n    finally:\n        client.close()\n\nmain()\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"sending-requests-in-async-mode",children:"Sending Requests in Async Mode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import asyncio\n\nasync def main():\n    # option 1: context manager\n    async with AsyncHivetraceSDK() as client:\n        response = await client.input(\n            application_id="your-application-id",\n            message="User prompt here",\n        )\n\n    # option 2: manual close\n    client = AsyncHivetraceSDK()\n    try:\n        response = await client.input(\n            application_id="your-application-id",\n            message="User prompt here",\n        )\n    finally:\n        await client.close()\n\nasyncio.run(main())\n'})}),"\n",(0,t.jsx)(n.h3,{id:"closing-the-async-client",children:"Closing the Async Client"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"await client.close()\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.p,{children:"The SDK reads configuration from environment variables:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"HIVETRACE_URL"})," \u2014 Base URL allowed to call."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"HIVETRACE_ACCESS_TOKEN"})," \u2014 API token used for authentication."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"These are loaded automatically when you create a client."}),"\n",(0,t.jsx)(n.h3,{id:"configuration-sources",children:"Configuration Sources"}),"\n",(0,t.jsx)(n.p,{children:"Hivetrace SDK can retrieve configuration from the following sources:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:".env File:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"HIVETRACE_URL=https://your-hivetrace-instance.com\nHIVETRACE_ACCESS_TOKEN=your-access-token  # obtained in the UI (API Tokens page)\n"})}),"\n",(0,t.jsx)(n.p,{children:"The SDK will automatically load these settings."}),"\n",(0,t.jsx)(n.p,{children:"You can also pass a config dict explicitly when creating a client instance."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'client = SyncHivetraceSDK(\n    config={\n        "HIVETRACE_URL": HIVETRACE_URL,\n        "HIVETRACE_ACCESS_TOKEN": HIVETRACE_ACCESS_TOKEN,\n    },\n)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,t.jsx)(n.p,{children:"Set up your environment variables for easier configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# .env file\nHIVETRACE_URL=https://your-hivetrace-instance.com\nHIVETRACE_ACCESS_TOKEN=your-access-token\nHIVETRACE_APP_ID=your-application-id\n"})}),"\n",(0,t.jsx)(n.h1,{id:"license",children:"License"}),"\n",(0,t.jsx)(n.p,{children:"This project is licensed under Apache License 2.0."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var s=i(6540);const t={},a=s.createContext(t);function l(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);